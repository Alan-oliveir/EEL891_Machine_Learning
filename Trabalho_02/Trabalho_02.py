# -*- coding: utf-8 -*-
"""Untitled8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qswQzpE17yY9FL6mLvD_UuJKxu2lt9yT

**Trabalho 2 - EEL 891 - Introdução ao Aprendizado de Máquina**

Aluno: Alan de O. Gonçalves

Neste trabalho foi usado KNN-regressor, support vector regression e linear regression.
"""

#-------------------------------------------------------------------------------
# Importar diretórios do google drive
#-------------------------------------------------------------------------------

from google.colab import drive
drive.mount ('/content/drive')

#-------------------------------------------------------------------------------
# Importar bibliotecas
#-------------------------------------------------------------------------------

import pandas as pd

#-------------------------------------------------------------------------------
# Ler o arquivo CSV com os dados de treinamento do Trabalho 2
#-------------------------------------------------------------------------------

dados_treinamento = pd.read_csv('/content/drive/MyDrive/conjunto_de_treinamento.csv')

#-------------------------------------------------------------------------------
# Removendo outliers
#-------------------------------------------------------------------------------

dados_treinamento = (dados_treinamento[(dados_treinamento.preco > 50000) & (dados_treinamento.preco < 50000000)])

#print(dados_treinamento)

dados_dummies_train = pd.get_dummies(data=dados_treinamento, columns=['tipo', 'tipo_vendedor'])

#print(dados_dummies_train)

#-------------------------------------------------------------------------------
# Removendo colunas com linhas vazias e dados pouco significativos
#-------------------------------------------------------------------------------

dados_train = dados_dummies_train.drop(dados_dummies_train.columns[[1, 7]], axis=1)

#print(dados_train)

#-------------------------------------------------------------------------------
# Ler o arquivo CSV com os dados do teste do Trabalho 2
#-------------------------------------------------------------------------------

dados_teste = pd.read_csv('/content/drive/MyDrive/conjunto_de_teste.csv')

#print(dados_teste)

dados_teste_dummies = pd.get_dummies(data=dados_teste, columns=['tipo', 'tipo_vendedor'])

#-------------------------------------------------------------------------------
# Removendo colunas com linhas vazias e dados pouco significativos
#-------------------------------------------------------------------------------

dados_test = dados_teste_dummies.drop(dados_teste_dummies.columns[[1, 7]], axis=1)

#print(dados_test)

#------------------------------------------------------------------------------
# Verificar as colunas disponíveis
#------------------------------------------------------------------------------

colunas_treino = dados_train.columns

print("Colunas conjunto de treino disponíveis:")
print(colunas_treino)

colunas_teste = dados_test.columns

print("Colunas conjunto de test disponíveis:")
print(colunas_teste)

#-------------------------------------------------------------------------------
# Removendo colunas com linhas vazias e dados pouco significativos
#-------------------------------------------------------------------------------

dados_train = dados_train.drop(dados_train.columns[[20]], axis=1)

#------------------------------------------------------------------------------
# Verificar as colunas disponíveis
#------------------------------------------------------------------------------

colunas_treino = dados_train.columns

print("Colunas conjunto de treino disponíveis:")
print(colunas_treino)

colunas_teste = dados_test.columns

print("Colunas conjunto de test disponíveis:")
print(colunas_teste)

#------------------------------------------------------------------------------
#  Visualizando os conjuntos de dados
#------------------------------------------------------------------------------

# print(dados_train)
# print(dados_test)

"""Estava dando erro devido ao conjunto de treinamento possuir quitinetes e o conjunto de testes não."""

#------------------------------------------------------------------------------
#  Criar os conjuntos correspondentes aos atributos e ao alvo
#------------------------------------------------------------------------------

X = dados_train.select_dtypes(exclude=['object']).drop('preco', axis=1)
y = dados_train.preco

#------------------------------------------------------------------------------
#  Dividir o conjunto de dados em conjunto de treinamento e conjunto de teste
#------------------------------------------------------------------------------

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split( X, y, test_size = 0.3, random_state = 3)

#------------------------------------------------------------------------------
#  Visualizando os conjuntos de treinamento e teste
#------------------------------------------------------------------------------

# print(X_train)
# print(y_train)
# print(X_test)
# print(y_test)

#------------------------------------------------------------------------------
#  KNN - Verificar a variação do erro com o parâmetro K (sem escala)
#------------------------------------------------------------------------------

from sklearn.neighbors import KNeighborsRegressor
from sklearn.metrics import mean_squared_error
import math

print ( ' ' )
print ( ' K-NN SEM ESCALA:' )
print ( ' ' )
print ( '   K      Erro' )
print ( ' ----     -------' )

for k in range(1,21):

    knn = KNeighborsRegressor(
            n_neighbors=k,
            weights='distance'
            )

    knn = knn.fit(X_train, y_train)

    y_resposta  = knn.predict(X_test)

    erro = math.sqrt ( mean_squared_error ( y_test  , y_resposta  ) )

    print ( str ( '   %2d' % k    ) + '  ' +
            str ( '%10.4f' % erro )
          )

#------------------------------------------------------------------------------
#  KNN - Verificar a variação do erro com o parâmetro K (com escala)
#------------------------------------------------------------------------------

from sklearn.preprocessing import MinMaxScaler,StandardScaler

scaler  = MinMaxScaler()
X_train = scaler.fit_transform(X_train)
X_test  = scaler.transform(X_test)

print ( ' ' )
print ( ' K-NN COM ESCALA:' )
print ( ' ' )
print ( '   K      Erro' )
print ( ' ----     -------' )

for k in range(1,21):

    knn = KNeighborsRegressor(
            n_neighbors=k,
            weights='distance'
            )

    knn = knn.fit(X_train, y_train)

    y_resposta  = knn.predict(X_test)

    erro = math.sqrt (mean_squared_error (y_test  , y_resposta))

    print ( str ( '   %2d' % k    ) + '  ' +
            str ( '%10.4f' % erro )
          )

"""O melhor resultado foi obtido usando escala e com k = 6."""

#------------------------------------------------------------------------------
#  Treinar um regressor kNN com k = 6 e escala
#------------------------------------------------------------------------------

K=6

from sklearn.neighbors import KNeighborsRegressor

modelo = KNeighborsRegressor( n_neighbors = K, weights='uniform' )
modelo = modelo.fit(X_train, y_train)
y_resposta = modelo.predict(X_test)

#------------------------------------------------------------------------------
#  Visualizando a resposta
#------------------------------------------------------------------------------

#print(y_resposta)

#------------------------------------------------------------------------------
#  Métricas de Erro
#------------------------------------------------------------------------------

from sklearn.metrics import mean_squared_error
from math import sqrt
import numpy as np

# Calculo  MSE:
MSE = mean_squared_error(y_test, y_resposta)

# Calculo  RMSE:
RMSE = sqrt(mean_squared_error(y_test, y_resposta))

# Calculo RMSPE:
RMSPE = np.sqrt(np.mean(np.square(((y_test - y_resposta) / y_test))))

print('MSE: ', MSE)

print('RMSE: ', RMSE)

print('RMSPE: ', RMSPE)

#------------------------------------------------------------------------------
#  Treinar um regressor linear com o conjunto de treinamento
#------------------------------------------------------------------------------

print ( ' ' )
print ( ' REGRESSOR LINEAR:' )
print ( ' ' )

from sklearn.linear_model import LinearRegression

modelo = LinearRegression()
modelo = modelo.fit(X_train, y_train)

y_resposta  = modelo.predict(X_test)

erro = math.sqrt ( mean_squared_error ( y_test  , y_resposta  ) )

print (str ('%10.4f' % erro))

#------------------------------------------------------------------------------
#  Métricas de Erro
#------------------------------------------------------------------------------

from sklearn.metrics import mean_squared_error
from math import sqrt
import numpy as np

# Calculo  MSE:
MSE = mean_squared_error(y_test, y_resposta)

# Calculo  RMSE:
RMSE = sqrt(mean_squared_error(y_test, y_resposta))

# Calculo RMSPE:
RMSPE = np.sqrt(np.mean(np.square(((y_test - y_resposta) / y_test))))

print('MSE: ', MSE)

print('RMSE: ', RMSE)

print('RMSPE: ', RMSPE)

#------------------------------------------------------------------------------
#  Treinar Support Vector Regression
#------------------------------------------------------------------------------

print ( ' ' )
print ( ' Support Vector Regression:' )
print ( ' ' )

from sklearn.svm import SVR
from sklearn.pipeline import make_pipeline

for c in range(1,10):

    regrSVR = make_pipeline(StandardScaler(), SVR(C=c, epsilon=0.2))

    regrSVR= regrSVR.fit(X_train, y_train)

    y_resposta  = regrSVR.predict(X_test)

    erro = math.sqrt (mean_squared_error (y_test  , y_resposta))

    print ( str ( '   %2d' % c    ) + '  ' +
            str ( '%10.4f' % erro )
          )

"""Observa-se que o erro diminui para valares mais altos de C."""

#------------------------------------------------------------------------------
#  Métricas de Erro
#------------------------------------------------------------------------------

from sklearn.metrics import mean_squared_error
from math import sqrt
import numpy as np

# Calculo  MSE:
MSE = mean_squared_error(y_test, y_resposta)

# Calculo  RMSE:
RMSE = sqrt(mean_squared_error(y_test, y_resposta))

# Calculo RMSPE:
RMSPE = np.sqrt(np.mean(np.square(((y_test - y_resposta) / y_test))))

print('MSE: ', MSE)

print('RMSE: ', RMSE)

print('RMSPE: ', RMSPE)

"""Dos métodos utilizados o que apresentou o melhor resultado foi KNN (com escala e k = 6)."""