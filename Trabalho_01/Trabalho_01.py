# -*- coding: utf-8 -*-
"""Untitled10.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-MitpCDMfa1iWJU-fVn1Wl9St7krIxia

**Trabalho 1 - EEL 891 - Introdução ao Aprendizado de Máquina**

Aluno: Alan de O. Gonçalves
"""

#-------------------------------------------------------------------------------
# Importar diretórios do google drive
#-------------------------------------------------------------------------------

from google.colab import drive
drive.mount ('/content/drive')

#-------------------------------------------------------------------------------
# Importar bibliotecas
#-------------------------------------------------------------------------------

import pandas as pd
import numpy as np

import statistics

#-------------------------------------------------------------------------------
# Ler o arquivo CSV com os dados de treinamento do Trabalho 1
#-------------------------------------------------------------------------------

dados_treinamento = pd.read_csv('/content/drive/MyDrive/conjunto_de_treinamento.csv')

print (dados_treinamento)

#-------------------------------------------------------------------------------
# Removendo colunas com linhas vazias e dados pouco significativos
#-------------------------------------------------------------------------------

#dados_teste = dados_teste_dummies.drop(dados_teste_dummies.columns[[1, 7]], axis=1)

dados_treinamento = dados_treinamento.drop(dados_treinamento.columns[[2, 3, 9, 10, 11, 12, 14, 15 , 16, 21, 22, 23, 24, 25, 27, 31, 33, 34, 37, 38, 39, 40]], axis=1)

print (dados_treinamento)

"""Durante os testes verifiquei que as colunas #15 - 'tipo_residencia' e #16 - meses_na_residencia' possuiam valores infinitos por isso removi essas colunas."""

#-------------------------------------------------------------------------------
# Substituindo registros preenchidos com NULL
#-------------------------------------------------------------------------------

# sexo
dados_treinamento['sexo'] = dados_treinamento['sexo'].replace(np.NaN,('N'))

#profissao
moda_profissao = statistics.mode(dados_treinamento['profissao'])
dados_treinamento['profissao'] = dados_treinamento['profissao'].replace(np.NaN, int(moda_profissao))

#ocupacao
moda_ocupacao = statistics.mode(dados_treinamento['ocupacao'])
dados_treinamento['ocupacao'] = dados_treinamento['ocupacao'].replace(np.NaN, int(moda_profissao))

print (dados_treinamento)

#-------------------------------------------------------------------------------
# Substituindo variaveis categoricas
#-------------------------------------------------------------------------------

dados_treinamento = pd.get_dummies(data=dados_treinamento, columns=['sexo',
                                                                'possui_telefone_residencial',
                                                                'vinculo_formal_com_empresa',
                                                                'possui_telefone_trabalho'])

print(dados_treinamento)

#-------------------------------------------------------------------------------
# Eliminando linhas com registros preenchidos com NULL
#-------------------------------------------------------------------------------

dados_treinamento.dropna()

print(dados_treinamento)

#------------------------------------------------------------------------------
#  Criar os conjuntos correspondentes aos atributos e ao alvo
#------------------------------------------------------------------------------

X = dados_treinamento.select_dtypes(exclude=['object'])
y = dados_treinamento.inadimplente

#------------------------------------------------------------------------------
#  Visualizando os conjuntos de dados
#------------------------------------------------------------------------------

print(X)
print(y)

#------------------------------------------------------------------------------
#  Dividir o conjunto de dados em conjunto de treinamento e conjunto de teste
#------------------------------------------------------------------------------

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split( X, y, test_size = 0.3, random_state = 4)

#------------------------------------------------------------------------------
#  Visualizando os conjuntos de treinamento e teste
#------------------------------------------------------------------------------

# print(X_train)
# print(y_train)
# print(X_test)
# print(y_test)

"""Nas células de código abaixo usei o codigo: numpy.isfinite(X_train).all()
- Para identificar quais colunas possuiam registros com valores infinitos.
"""

import numpy
numpy.isfinite(X_train).all()

import numpy
numpy.isfinite(X_test).all()

import numpy
numpy.isfinite(y_train).all()

import numpy
numpy.isfinite(y_test).all()

from sklearn.neighbors import KNeighborsClassifier

# Initialize a model with 4 neighbors
knn = KNeighborsClassifier(n_neighbors=4) # Para K = 4, obtive o melhor resultado

modelo = knn.fit(X_train, y_train)
y_resposta = modelo.predict(X_test)

#------------------------------------------------------------------------------
#  Visualizando a resposta
#------------------------------------------------------------------------------

print(y_resposta)

"""
ValueError: Input contains NaN, infinity or a value too large for dtype('float64').

Resolvido removendo as colunas descritas acima."""

#------------------------------------------------------------------------------
#  Métricas de Erro
#------------------------------------------------------------------------------

from sklearn.metrics import accuracy_score

acuracia = accuracy_score(y_test, y_resposta)

print('Acuracia: ', acuracia)

#------------------------------------------------------------------------------
#  Support Vector Machines
#------------------------------------------------------------------------------

from sklearn.svm import LinearSVC

LinSVC = LinearSVC (penalty='l2', C= 10.0)

LinSVC = LinSVC.fit (X_train , y_train)

y_resposta = LinSVC.predict(X_test)

#------------------------------------------------------------------------------
#  Métricas de Erro
#------------------------------------------------------------------------------

from sklearn.metrics import accuracy_score

acuracia = accuracy_score(y_test, y_resposta)

print('Acuracia: ', acuracia)

"""Os melhores resultados foram obtidos usando SVM (com C = 10.0)"""

#------------------------------------------------------------------------------
#  Classificador Beyesiano
#------------------------------------------------------------------------------

from sklearn.naive_bayes import BernoulliNB

BNB = BernoulliNB (alpha=2.0)

BNB = BNB.fit (X_train , y_train)
y_resposta = BNB.predict (X_test)

#------------------------------------------------------------------------------
#  Métricas de Erro
#------------------------------------------------------------------------------

from sklearn.metrics import accuracy_score

acuracia = accuracy_score(y_test, y_resposta)

print('Acuracia: ', acuracia)